name: Deploy Coach Joe FFmpeg Processor

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Install FFmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg
          
      - name: Test imports
        run: |
          python -c "from coach_joe_ffmpeg_processor import CoachJoeVideoProcessor; print('Import successful')"
          
      - name: Test FFmpeg
        run: |
          ffmpeg -version

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-runpod:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to RunPod
        run: |
          echo "ðŸš€ Ready to deploy to RunPod!"
          echo "Use this image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "Create endpoint at: https://runpod.io/console/serverless"
          
      - name: Create deployment summary
        run: |
          echo "## ðŸŽ¬ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Container Image" >> $GITHUB_STEP_SUMMARY
          echo "\`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "### RunPod Deployment" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to [RunPod Console](https://runpod.io/console/serverless)" >> $GITHUB_STEP_SUMMARY
          echo "2. Create new serverless endpoint" >> $GITHUB_STEP_SUMMARY
          echo "3. Use container image above" >> $GITHUB_STEP_SUMMARY
          echo "4. Set handler to: runpod_handler.py" >> $GITHUB_STEP_SUMMARY
          
          echo "### Alternative Platforms" >> $GITHUB_STEP_SUMMARY
          echo "- **Replicate**: \`cog push r8.im/your-username/coach-joe-ffmpeg\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Modal**: \`modal deploy modal_handler.py\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Docker**: \`docker run -p 8080:8080 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY 
